/* (c) 2019 Andrea Buran [www.andreaburan.com] All rights reserved */

/*
** Variables
*/

$base-unit:                 4px;

$browser-default-font-size: 16px;

$base-font-size:            16px;
$base-font-line:            $base-unit*6;

$m-base-rhythm:             $base-unit*6;
$d-base-rhythm:             $base-unit*10;

/*
** Font sizes and line heights
** m : mobile
** t : tablet
** d : desktop
*/

$m-large-size:          28px;
$m-large-line:          $base-unit*10; //32px

$d-large-size:          36px;
$d-large-line:          $base-unit*12; //44px

$m-medium-size:         20px;
$m-medium-line:         $base-unit*8; //32px

$d-medium-size:         24px;
$d-medium-line:         $base-unit*10; //36px

$m-small-size:          18px;
$m-small-line:          $base-unit*6; //24px

$d-small-size:          20px;
$d-small-line:          $base-unit*7; //28px

$m-extra-small-size:    14px;
$m-extra-small-line:    $base-unit*5; //20px

$d-extra-small-size:    14px;
$d-extra-small-line:    $base-unit*5; //20px

$m-tiny-size:           12px;
$m-tiny-line:           $base-unit*4;  //16px

$d-tiny-size:           12px;
$d-tiny-line:           $base-unit*4;  //16px

/*
** Font weights
*/

$bold:      600;
$normal:    400;

/*
** Icon sizes
*/

$icon-size:             12px;
$icon-line:             $base-unit*3; //12px

/*
** Grid
*/

$column-width: 64px;

/*
** Guts and indents
*/

$m-gut: 16px; // mobile gut
$d-gut: 24px; // desktop gut

/*
** Border widths
*/

$border-width:        1.5px;

/*
** Strip units
*/

@function strip($number) {
  @return $number / ($number * 0 + 1);
}

/*
** Convert pxs to ems
*/

@function em($px, $base: $base-font-size) {
  @return strip($px / $base) * 1em;
}

/*
** Column-width function, in ems
*/

@function col($number-columns, $base: $base-font-size) {
  @return em($column-width * $number-columns, $base);
}

/*
** Column-width function, in pxs
*/

@function col-px($number-columns) {
  @return $column-width * $number-columns * 1px;
}

/*
** Typefaces
*/

@mixin font-face($type-name, $file-name, $weight, $style) {
  @font-face {
    font-family: "#{$type-name}";
    src: url("../../fonts/woff2/#{$file-name}.woff2") format("woff2"),
         url("../../fonts/woff/#{$file-name}.woff") format("woff");
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin face($status: sans) {
  @if $status == "sans" {
  font-family: "Faune", "Helvetica Neue", Arial, sans-serif;
  } @else if $status == "serif" {
  font-family: "Spectral", Georgia, serif;
  } @else if $status == "mono" {
  font-family: "Roboto Mono", "Andale Mono", "Monaco", monospace;
  }
}

/*
** Font size
*/

@mixin font-size($to-size, $lines: auto, $from-size: $base-font-size) {
  font-size: em($to-size, $from-size);
  @if $lines != auto {
    line-height: em($lines, $to-size);
  }
}

/*
** Adjust the width of an element (to accomodate for CSS Comb)
*/

@mixin adjust-dimension($dimension, $to-gut, $from-size: $base-font-size) {
  #{$dimension}: calc(100% - #{em($to-gut*2, $from-size)});
}

/*
** Link
*/

@mixin link($status: normal) {
  font-weight: $bold;
  @if $status == "normal" {
    &:after {
      font-weight: $normal;

      margin-left: 0.1em;

      content: "]";
    }
    &:before {
      font-weight: $normal;

      margin-right: 0.1em;

      content: "[";
    }
    &:hover {
      &:after {
        content: "[";
      }
      &:before {
        content: "]";
      }
    }
  } @else if $status == "current" {
    &:after {
      font-weight: $normal;

      margin-left: 0.1em;

      content: "[";
    }
    &:before {
      font-weight: $normal;

      margin-right: 0.1em;

      content: "]";
    }
  }
}

/*
** Tempo
*/

$duration: 0.2s;

/*
** Rainbow
*/

@mixin rainbow($col-number, $direction: "to right") {
  $gradient: ();

  $column-width: 100/$col-number*1%; //width of a column in percentage

  @each $hour, $deg in $colors {
    $dump: ();

    $dump:
    adjust-hue($background-color, $deg) $column-width * ($hour - 1),
    adjust-hue($background-color, $deg) $column-width * ($hour);

    $gradient: join($gradient, $dump, comma);
  }

  background-image: linear-gradient(to right, $gradient);
}

@mixin clip-head($col-number) {
  $points: ();

  @for $i from 0 through $col-number {
    $dump: ();

    @if $i % 2 == 0 {
      $dump: 100/$col-number*$i*1% 0%,
    } @else {
      $dump: 100/$col-number*$i*1% 100%,
    }

    $points: join($points, $dump, comma);
  }

  clip-path: polygon(0% 0%, $points, 100% 0%);
}

@mixin clip-feet($col-number) {
  $points: ();

  @for $i from 0 through $col-number {
    $dump: ();

    @if $i % 2 == 0 {
      $dump: 100/$col-number*$i*1% 100%,
    } @else {
      $dump: 100/$col-number*$i*1% 0%,
    }

    $points: join($points, $dump, comma);
  }

  clip-path: polygon(0 100%, $points, 100% 100%);
}
